[["index.html", "行動経済学の実証分析 Chapter 1 Ready? 1.1 R(Studio)とは？ 1.2 Tips! 1.3 R(Studio)のインストール", " 行動経済学の実証分析 Tomohisa OKADA 2023-05-17 Chapter 1 Ready? 1.1 R(Studio)とは？ Rは、オープンソースで利用可能な統計解析に特化したプログラミング言語 RStudioは、Rを使うための統合開発環境（なくてもRは使えるが、あるとめちゃ便利！） 今は「まったく意味不明」で全然OK！ 1.2 Tips! Rに関するお役立ちサイトや書籍をまとめる 「卒業論文のためのR入門」 by 森知晴先生 Rの使い方と心理統計学の基礎が一挙に学べる！ 「私たちのR」 by 宋財泫先生 &amp; 矢内勇生先生 辞書的に使える！Tidyverseを使ったモダンなRのプログラムが学べる！ 「経営工学雑記帖」内のRのページ by 逆瀬川浩孝先生 網羅的でスッキリわかりやすい！辞書的に使うのにオススメ 「Rによる統計入門」 by 津田裕之先生 Rの基礎から簡単な統計分析まで（因子分析もカバー） 「Rで計量政治学入門」 by 土井翔平先生 政治学の研究者以外にも有用！特にデータの読み込みやtidyverseの使い方が詳しい！ 1.3 R(Studio)のインストール 次のサイトにアクセス( https://posit.co/download/rstudio-desktop/ ) 「1:Install R」からRをインストール 「2:Install RStudio」からRStudioをインストール うまくインストールできない場合は、「私たちのR」に超詳しい解説がある "],["go.html", "Chapter 2 Go!! 2.1 RStudioを開く 2.2 コンソールに直接打ち込む 2.3 Rスクリプトを使う 2.4 プロジェクト管理 2.5 演習問題", " Chapter 2 Go!! とりあえずまずは使ってみよう！ 2.1 RStudioを開く RStudioのアイコンから起動 次のような画面が表示される 2.2 コンソールに直接打ち込む 左側の大きな枠を見る Consoleのタブが選択されていることを確認 この画面（＝コンソール）を使い、簡単な足し算を実行しよう 最下段の&gt;のあとに1+1と打ち込みEnter（macはreturn）を押す [1] 2と返ってくる 2の部分が1+1の計算結果（[1]は1行目という意味） 2.3 Rスクリプトを使う コンソールに書いたコードは、Rstudioを終了すると消える （実際に終了して再起動してみよう） だから、Rスクリプトと呼ばれる保存可能なファイルにコードを書くことが多い Rスクリプトを作る： RStudioの左上の をクリックし、「R Script」を選択 左上に新しくできた枠に、空のRスクリプトファイルが表示される （untitled1と表示されたタブが作成したRスクリプト） RStudioの４つのペーン： 実際には、この４つの枠（＝ペーン）に分かれた画面で作業することが多い ①左上：メインの作業場で、Rスクリプトのコードなどを書くところ ②右上：変数やオブジェクトのリストが表示されたり、バージョン管理を行う ③左下：コードの実行結果が表示されるコンソールや、各種コマンドを実行するターミナルなど ④右下：各種ファイルやパッケージの表示、出力した図の表示など Rスクリプトに書く： 左上のペーンを見て、untitled1のタブが選択されていることを確認 1行目に1+1と入力してctrl+Enter（macはcommand+return）を押す （ をクリックしても良い） 左下のペーンのコンソールに結果([1] 2)が表示される 保存： Rスクリプトはctrl+s（macはcommand+s）で好きな時に保存できる （ をクリックしても良い） 初回はファイル名と保存場所も決める （test.Rという名前でデスクトップに保存してみよう） 試しに、保存したRスクリプトのタブを閉じてみよう （test.Rのタブの右側の×をクリック） 左上の をクリックし、保存したRスクリプトのファイルを選択 （つまり、デスクトップにあるtest.Rを選択） Rスクリプトが先ほど保存した状態で開く さらに書く！： 続けて、簡単な引き算を実行しよう 2行目に5-2と入力する 2行目にカーソルを合わせてctrl+Enterを押す 2行目の計算結果([1] 3)が表示される 1行目にカーソルを合わせてctrl+Enterを押す 1行目の計算結果([1] 2)が表示される つまり、実行したい行にカーソルを合わせてctrl+Enterを押せば良い 全ての行を一括で実行したいならctrl+shift+Enter（macはcommand+shift+return） 一部分だけ実行したいなら、下図のように実行したい行だけ選択してctrl+Enter Rスクリプトを使うメリット： コードが保存できる（毎回書き直さなくて良い！） 長く複雑なコードを書いたり、管理するのが楽 他の人に配布できる（分析を再現してもらいやすい） などなど… 2.4 プロジェクト管理 研究プロジェクトが進むと、ひとつのRスクリプトだけでは管理しきれなくなる プロジェクトを使えば、複数のRスクリプトや関連データなどを一つのフォルダにまとめて効率よく管理できる プロジェクトの作成： 左上の をクリックし、「New Directry」→「New Project」の順に選択 次の画面で①プロジェクト名と、その②作成場所を指定して③「Create Project」 指定した場所に、指定したプロジェクト名のフォルダができているのを確認しよう (以降、これをプロジェクトフォルダと呼ぶ) そのフォルダの中にプロジェクト名.Rprojというファイルができているのを確認しよう 以下は、macでDocumentフォルダ内にsugoi_projectというプロジェクトを作った例 初めはご利益がわかりにくいが、研究プロジェクトごとにプロジェクトを作るクセをつけよう そして、次の心得に従い、プロジェクト上で作業をするようにしよう！ 毎回プロジェクト名.RprojをダブルクリックしてRstudioを起動 関連するファイルはプロジェクトフォルダにまとめて一元管理 2.5 演習問題 自分の好きな場所にzemiという名前のプロジェクトを作る 指定した場所にzemiというフォルダができているのを確認する フォルダの中にzemi.Rprojというファイルが出来ているのを確認 ※ 今後は、このzemiプロジェクトで作業していることを前提に解説する "],["基本操作①.html", "Chapter 3 基本操作① 3.1 四則演算 3.2 変数（オブジェクト） 3.3 関数①（数値に対する関数） 3.4 データ型のキホン 3.5 演習問題", " Chapter 3 基本操作① 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしよう！ オブジェクトの使い方 in R 関数の使い方 in R データ型やデータ構造については、逆瀬川浩孝先生のホームページを参照 「経営工学雑記帖」内のRのページ 3.1 四則演算 たし算: +を使う 1 + 1 ## [1] 2 ひき算: -を使う 5 - 2 ## [1] 3 かけ算: *を使う 4 * 5 ## [1] 20 わり算: /を使う（分数のイメージ） 8 / 2 ## [1] 4 累乗: ^か**を使う（例：\\(4^2\\)なら次のとおり） 4 ^ 2 ## [1] 16 4 ** 2 ## [1] 16 例えば、9÷2の答えは「4余り1」 この時、４を整数の商、1を剰余という 整数の商: %/% 9%/%2 ## [1] 4 剰余（mod）: %% 9%%2 ## [1] 1 3.2 変数（オブジェクト） オブジェクトとは、色々なモノを入れる箱のようなもの1 オブジェクトを変数という人もいる（数学の変数のようなイメージだから） 本資料では変数と呼ぶことにする（字数が少ないから） 次のコードを見てみよう x &lt;- 1 # &lt;- は左向矢印のイメージ # このように#から始まる文章を書いてコメントを残せる # これをコメントアウトと呼ぶ # あとで見てわかりやすいような覚え書きなどを残そう これはxという箱を作り、その中に数字の1を入れたイメージ （変数xに１を代入したイメージでもOK！） 上のコードを実行しても何も表示されないが、それでOK （「箱に入れる」だけのコードなので表示はされない） 変数の中身を確認したい時は、オブジェクトの名前を書いて実行 x ## [1] 1 数値を代入した変数同士で演算もできる y &lt;- 1 z &lt;- 2 y * z # 1*2を計算したことになる ## [1] 2 変数はいつでも上書きできる x &lt;- 1 #xに1を代入 x ## [1] 1 x &lt;- 2 #xを2に上書き x ## [1] 2 計算結果を変数に代入することもできる x &lt;- 2+5 x # 計算結果の7が代入される ## [1] 7 慣れるまでは不思議だが、こんなこともできる 意外とよく使うので、頭の片隅に留めておこう suuji &lt;- 2 #suujiに2を代入 suuji &lt;- suuji + 1 #suuji=2に1を足したものを、もう一度suujiに代入 suuji #新しいsuujiを表示 ## [1] 3 変数には数値以外も入れることができる 例えば、mojiという変数を作り文字列を入れてみる # 文字列は&quot;ダブルコーテーション&quot;で囲む # &#39;シングルコーテーション&#39;でも良い # 次のようにアルファベット以外も一応使えるが推奨しない moji &lt;- &quot;岡田先生ステキ&quot; moji ## [1] &quot;岡田先生ステキ&quot; 練習問題 変数xに3、変数yに6を代入する xとyをそれぞれ2乗して和をとり、結果が45となることを確認する 3.3 関数①（数値に対する関数） 関数のキホン： Rにはさまざまな機能を実行できる関数が用意されている 例えば、平方根を計算する関数がsqrt() ()の中に数値を入れると、その平方根を返してくれる sqrt(2) ## [1] 1.414214 このように関数はxxx()のように最後が丸括弧になっている 丸括弧の中に、引数(ひきすう)と呼ばれる指定された形式の値を入れて実行する その結果、出力された値を戻り値という 先ほどのsqrt(2)なら2が引数で、計算結果の1.414214が戻り値 複数の引数を持つ関数： 引数は１つとは限らないので注意 例えば、log()は対数を計算する関数 次のようにすると、10の自然対数を返してくれる log(10) ## [1] 2.302585 でも、2つ目の引数base=10を付け足すと、底が10の常用対数を返してくれる log(10, base = 10) ## [1] 1 数値(numeric型)を引数にする関数のうち、よく使うものを列挙する 関数(引数xは数値) 意味 log(x) 自然対数 log(x, base=y) yを底とする常用対数 sqrt(x) xの平方根 exp(x) x指数関数（\\(e^x\\))） abs(x) xの絶対値 round(x,y) 小数点以下y桁になるようxを四捨五入（IEEE754方式）※ 詳細は演習問題参照 floor(x) xの小数点以下切り捨て ceiling(x) xの小数点以下切り上げ 他にも、数え切れないほどの関数がある 関数の機能や引数の調べ方： 関数の機能や、どんな形式の引数をいくつ持つかを調べるにはhelp()を使う 知りたい関数から()を除いたものを、help()の中に入れる 例えば、log()について知りたいならhelp(log)と書いて実行 すると、Rstudioの右下（左下ではない！）のペーンに詳細が表示される 3.4 データ型のキホン 次の２つの変数に対して+ 1という演算を実行してみよう suuji &lt;- 2 suuji + 1 moji &lt;- &quot;岡田先生ステキ&quot; moji + 1 ひとつ目は3という結果を得るが、ふたつ目はエラーが出て処理できない この理由を考えてみよう suujiに格納された2というデータは、数字の型（numericないしdouble）を持っている mojiに格納された文字列のデータは、文字列の型（character）を持っている character型のデータに対しては、+を使った演算が定義されていないからエラーが出た このように、+のような演算子や関数は、特定のデータ型に対してしか使えない データ型を確認するにはtypeof()かmode()の関数を使う typeof(suuji) ## [1] &quot;double&quot; typeof(moji) ## [1] &quot;character&quot; 他によく使うデータ型には真偽値（TRUEとFALSE）をあつかうlogicalがある データ型についての詳しい説明は逆瀬川先生のホームページ内のコチラを参照 練習問題 上のsuujiとmojiについて、mode(suuji)とmode(moji)を実行する typeof(suuji)とmode(suuji)の結果を比較する 3.5 演習問題 zemiという名前のプロジェクトの中に、exercise_ch3.RというRスクリプトを作りなさい exercise_ch3.Rに、以下の問題に答るためのコードを書きなさい 基本問題： abs(-5)の結果を確認する x &lt;- exp(10)とした上で、log(x)の結果を確認 挑戦問題： round(0.45, 1)が0.5ではなく0.4になることを確認する （IEEE式の四捨五入では、末尾が偶数になるように5を丸める） floor(0.45 * 10)/10で、通常の四捨五入（0.5）になることを確認する （xに対し、小数点以下y桁となるように通常の四捨五入をするにはfloor(x * 10^y + 0.5)/10^y） エラーが出る場合は、以前の章を参考にパッケージが正しくインストールされているか確認しよう↩︎ "],["基本操作②.html", "Chapter 4 基本操作② 4.1 ベクトルと行列 4.2 関数②（ベクトルや行列に対する関数） 4.3 関数の自作 4.4 データ構造のキホン 4.5 演習問題", " Chapter 4 基本操作② 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしよう！ オブジェクトの使い方 in R 関数の使い方 in R データ型やデータ構造については、逆瀬川浩孝先生のホームページを参照 「経営工学雑記帖」内のRのページ 4.1 ベクトルと行列 Rでは、複数のデータの値をひとまとめにして扱いやすくできる 4.1.1 ベクトル 同じ型のデータを1列に並べたものをベクトルと呼ぶ ベクトルは関数c()を使って作る ベクトルも変数に入れることができる 例として、5つの数字（例えば、2,4,2,3,5）を並べたベクトルを変数vに代入する v &lt;- c(2, 4, 2, 3, 5) #ベクトルを作り変数に代入 v #変数vの中身を確認 ## [1] 2 4 2 3 5 連番のベクトル（例えば2,3,4,5,6）を作りたい時は、次のようにも書ける v2_6 &lt;- c(2:6) #「n:m」で「nからmまで」の意味 v2_6 ## [1] 2 3 4 5 6 ベクトルと数値の演算： ベクトルにも四則演算の記号（=演算子）を使った演算ができる ベクトル内のそれぞれの数字に、四則演算が施される 以下の出力結果で確認してみよう v ## [1] 2 4 2 3 5 v+2 #それぞれの数字に２を足す ## [1] 4 6 4 5 7 2*v #それぞれの数字に２をかける ## [1] 4 8 4 6 10 練習問題 上のvについて、v-2、v/2、v^2の実行結果を確認する ベクトル同士の演算： Rでは、ベクトル同士の演算もできる まずは2つのベクトルを用意しよう v1 &lt;- c(1, 2) v2 &lt;- c(2, 4) これらを+を使って「足す」 すると、１つめの数同士（1と2）と、２つめの数同士(2と4)が足される v1 + v2 ## [1] 3 6 *を使って「かける」場合も、同じように1つめの数同士、2つめの数同士がかけられる v1 * v2 ## [1] 2 8 ベクトル同士の「かけ算」には内積がある Rでは、%*%で内積を計算できる v1 %*% v2 ## [,1] ## [1,] 10 ベクトルの長さ（=入っている数値の個数）が違うとおかしな計算になり、警告が出る #以下のv1には3つの要素があるけど、v2には2つしかない #この場合、v2の1つめの要素を無理やりv1の３つめに足してしまう v1 &lt;- c(1, 2, 3) #3つの数を代入 v2 &lt;- c(2, 4) #2つの数を代入 v1 + v2 #長さが違うからうまく計算できず警告が出る ## Warning in v1 + v2: longer object length is not a multiple of shorter object ## length ## [1] 3 6 5 ベクトルの長さを確認するにはlength()を使えば良い length(v1) ## [1] 3 練習問題 上のv1とv2を使い、-、/、^の３つの演算を行う いずれも1つめの数値同士、2つめの数値同士で対応した演算がなされることを確かめる 要素の抽出： ベクトルから、任意の要素（n番目の数）を抽出する方法を説明する xという名前のベクトルからn番目の要素を抽出する時はx[n] 具体例として、先ほどのベクトルv=c(2,4,2,3,5)で考える 2番目の要素（つまり4）を抜き出したいなら、v[2]と書く 2〜４番めの要素(つまり4,2,3)を抜き出したいなら、v[2:4]と書く v[2:4] ## [1] 4 2 3 4.1.2 行列 行列のキホン： 同じ型のデータを行と列の2次元に並べたものを行列と呼ぶ 例えば、2行3列の行列 \\(\\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ \\end{pmatrix}\\) を作ってMに代入するには、matrix()を使い次のように書く #初めの1:6はc(1:6)と同じで「1,2,3,4,5,6」の意味 #この6つの数字を、2つの行(row)と3つの列(col)に分ける #byrow = Tで、6つの数字を左から右（zの書き順）に埋めるよう指示 #byrow = Tを消すと、上から下に埋める（各自確かめよう） M &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = T) M ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 次の関数を使って、ベクトル同士を結合しても行列を作れる v1 &lt;- c(1,2,3) v2 &lt;- c(1,1,1) #2つのベクトルv1とv2を作る rbind(v1, v2) #v1とv2を行(row)方向に繋げる ## [,1] [,2] [,3] ## v1 1 2 3 ## v2 1 1 1 cbind(v1, v2) #v1とv2を列(column)方向に繋げる ## v1 v2 ## [1,] 1 1 ## [2,] 2 1 ## [3,] 3 1 rbind(M, v1) #「行列とベクトル」や「行列同士」も繋げられる ## [,1] [,2] [,3] ## 1 2 3 ## 4 5 6 ## v1 1 2 3 要素の抽出： 行列xから要素を抜き出すには、x[抜き出したい行、抜き出したい列]と書く 具体例として、先の行列Mから色々な要素を抜き出してみよう # 2行1列目を抽出し、変数M21に代入 M21 &lt;- M[2,1] # 2行めを抽出 M[2,] ## [1] 4 5 6 # 1列めを抽出 M[,1] ## [1] 1 4 # 1,2行めと1,3列めを抽出 M[c(1,2),c(1,3)] ## [,1] [,2] ## [1,] 1 3 ## [2,] 4 6 行列の演算： n行n列の２つの行列同士の計算について、足し算は+、引き算は-を使えば良い 以下の例のように、かけ算は%*%を使わなくてはいけないので注意 M #先ほど作った2行3列の行列を表示 ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 M2 &lt;- matrix(c(1,2,0,1,0,2), nrow = 3, ncol = 2, byrow = T) #新たに3行2列の行列を作る M2 #今作った2行3列の行列を表示 ## [,1] [,2] ## [1,] 1 2 ## [2,] 0 1 ## [3,] 0 2 #２つの行列の積MN M %*% M2 ## [,1] [,2] ## [1,] 1 10 ## [2,] 4 25 #２つの行列の積MN M2 %*% M ## [,1] [,2] [,3] ## [1,] 9 12 15 ## [2,] 4 5 6 ## [3,] 8 10 12 v &lt;- c(1,2,3) #要素が３つのベクトルを作る #行列とベクトルのかけ算も%*%を使う #縦ベクトルと横ベクトルは区別されないので、次のコードで計算できる v %*% M2 # ただし、M2%*%vのように計算できない場合はエラーが出る（各自確かめよう） ## [,1] [,2] ## [1,] 1 10 4.2 関数②（ベクトルや行列に対する関数） 先のrbind()やcbind()はベクトルや行列も引数にとれる関数だった ベクトルや行列に対して使える他の関数をいくつか紹介する ベクトルの頻出関数： 以下の関数はどれもよく使うので、しっかり覚えよう 関数(引数xはベクトル) 意味 summary(x) 基本統計量の一括表示 max(x) xの要素の最大値 min(x) xの要素の最小値 mean(x) xの平均値 median(x) xの中央値 var(x) xの不偏分散 sd(x) xの不偏標準偏差 sum(x) xの各要素の総和 range(x) xのデータの範囲（最小値と最大値） length(x) xのデータの個数（ベクトルの次元） sort(x) xの各要素を小さい順に並び替え sort(x, decreasing = TRUE) xの各要素を大きい順に並び替え 具体的に理解するため、5人の年齢のデータを作成する age &lt;- c(36, 16, 43, 18, 22) #5人の年齢のベクトルを作成 このベクトルageを引数にして、上表のいくつかを実行してみる summary(age) #基本統計量を一括表示 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 16 18 22 27 36 43 max(age) #一番大きい値を取り出す（5人のうち最年長は43歳） ## [1] 43 mean(age) #算術平均（5人の平均年齢は27歳） ## [1] 27 var(age) #不偏分散（5人の平均の分散は141） ## [1] 141 練習問題 引数をageにして、min(), median(),sd(),sum(),range(),length(),sort()を実行する 各々の結果が何を意味しているのかを解釈する 引数を行列Mにして、上表の各関数の結果を確認する 行列の頻出関数： 行列を引数に持つ関数のうち、比較的よく使うものをまとめる どのような結果になるかは各自確かめてみよう 関数(引数xは行列) 意味 matrix(0, nrow=2, ncol=3) 2 行 3 列のゼロ行列を作成 diag(5) 5×5の単位行列作成 diag(X) &lt;- 1 行列 X の対角成分を全て 1 にする t(X) 行列 X の転置行列 solve(X) 行列 X の逆行列 det(X) 行列 X の行列式 rowSums(X) 行列 X の行和 colSums(X) 行列 X の列和 RowMeans(X) 行列 X の行平均 colMeand(X) 行列 X の列平均 練習問題 上の各関数を先の行列Mに使い、結果を確かめよう 4.3 関数の自作 少し難しいのでスキップして3.7に進んでもOK Rには、他にもたくさんの関数が用意されている でも、既存関数を駆使しても、長く煩雑なコードでしか処理できないことも多い そのようなコーディングを繰り返し実行しなければいけない時は、自作関数を作ると便利 自作関数の作り方の基本は以下のとおり 関数名 &lt;- function (引数名) { 処理内容 } 例えば、\\(a/(1-x)\\)という計算を、様々なaとxの値で繰り返し実行する必要があるとする この計算を実行する関数inf_geo()は、次のように自作できる inf_geo &lt;- function (a, x) { a/(1-x) } 出来上がった関数を使うときは、次のようにする #a=1で、x=0.8を計算したい場合 inf_geo(1, 0.8) ## [1] 5 4.4 データ構造のキホン Rにおけるデータの基本単位はベクトル（数値は長さ１のベクトルとみなす） Rでは、ベクトルを束ねたさまざまなデータ構造が使われる 例えば、行列は同じデータ型のベクトルを積み重ねた２次元のデータ構造 他にも、後の章で詳しく説明されるデータフレームなどがよく使われる より詳しいデータ構造の説明は逆瀬川先生のホームページ内のコチラを参照 4.5 演習問題 zemiという名前のプロジェクトの中に、exercise_ch4.RというRスクリプトを作りなさい exercise_ch4.Rに、以下の問題に答るためのコードを書きなさい 基本問題： aさんの身長は149cm, bさんは153cm, cさんは169cm, dさんは174cmとする aさんの体重は36kg, bさんは48kg, cさんは61kg, dさんは65kgとする 4人の身長を表した数値のみからなるベクトル（単位は不要）を作り、変数hに保存する 変数hの平均と標準偏差を求める ベクトルのかけ算を使い、４人の身長をインチで表すといくらになるか求める （1cm＝0.39インチで計算し、結果は変数に保存しない） 4人の体重を表した数値のみからなるベクトル（単位は不要）を作り、変数wに保存する 変数hと変数wを結合して、１行目が身長、２行目が体重となる2×4行列を作り、変数Mに保存 行列の要素抽出を使い、変数Mからbさんの体重のデータを抜き出す 変数wを小さい順に並べ替えることで、身長の低い順に並び替えた変数h2を作る 挑戦問題： xを小数点以下y桁となるように通常の四捨五入をする関数sisya_gonyu(x,y)を自作する （通常の四捨五入については、前章の演習問題参照） sisya_gonyu(0.4445,3)の結果を確認する "],["パッケージ.html", "Chapter 5 パッケージ 5.1 パッケージとは？ 5.2 パッケージのインストール 5.3 パッケージの呼び出し", " Chapter 5 パッケージ 本章の説明がわからない人は、第１章で紹介した「私たちのR」 を参照しよう！ 5.1 パッケージとは？ 主だった分析やデータ処理などの関数は、誰かが作って公開していることが多い 誰かが作った便利な自作関数を配布用にまとめたものをパッケージという パッケージは、Rの機能を拡張しパワーアップさせる道具箱のイメージ 5.2 パッケージのインストール 数えきれないパッケージの中から、自分に合うものを適宜インストールして利用できる インストール方法は、引数をインストールしたいパッケージ名にしてinstall.packages()を実行 例えば、tidyverseというパッケージは、次のようにインストールする2 このtidyverseを導入することでRが化ける！（詳しい使い方は次章） # 初回に一度だけ実行 install.packages(&quot;tidyverse&quot;) #引数の&quot;ダブルコーテーション&quot;を忘れない 5.3 パッケージの呼び出し インストールするだけではパッケージは使えない 次のコードを実行して呼び出すことで初めてtidyverseが使えるようになる # RStudioを起動する度に実行 library(tidyverse) #引数の&quot;ダブルコーテーション&quot;は不要 install.packages()は、初回に一度だけ実行すれば良い ただし、library()はRstudioを起動するたびに実行する必要がある そのため、Rスクリプトの最初に分析で使うlibrary(パッケージ名)を列挙しておくと良い エラーが出る場合は、以前の章を参考にパッケージが正しくインストールされているか確認しよう↩︎ "],["データの読み込み.html", "Chapter 6 データの読み込み 6.1 データフレーム 6.2 データの読み込み 6.3 演習問題", " Chapter 6 データの読み込み 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしよう！ データの読み込み in R さらに詳しいことを学びたいなら「Rで計量政治学入門」がオススメ 6.1 データフレーム データ分析をする時は、横方向（行）に観測値を、縦方向（列）に変数を並べることが多い 例えば、ある4人の名前、年齢、身長、体重のデータは、次のように並べることが多い Name Age Height Weight Gender Tanaka 10 149.5 36 male Suzuki 18 153 48 female Okada 41 171 58 male Watanabe 26 174.5 65 male Rでこのようなデータをあつかう場合、データフレームを使う3 6.1.1 データフレームの作成 上のデータのデータフレームを作るには、以下のように関数data.frame()を使う # まず各変数のベクトルを作る name &lt;- c(&quot;Tanaka&quot;, &quot;Suzuki&quot;, &quot;Okada&quot;, &quot;Watanabe&quot;) age &lt;- c(10, 18, 36, 23) #年齢のベクトルの作成 height &lt;- c(149.5, 153.0, 171.0, 174.5) weight &lt;- c(36, 48, 58, 65) gender &lt;- c(&quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;) # data.frame()の引数に、作成したベクトルを並べる # 出来上がったデータフレームを変数dfに格納 df &lt;- data.frame(name, age, height, weight, gender) df ## name age height weight gender ## 1 Tanaka 10 149.5 36 male ## 2 Suzuki 18 153.0 48 female ## 3 Okada 36 171.0 58 male ## 4 Watanabe 23 174.5 65 male 6.1.2 データフレームからの変数の抽出 例えば、dfというデータフレームから変数ageを抜き出すには、$を使って次のように書く df$age ## [1] 10 18 36 23 抜き出した変数df$ageを、別の変数に格納することもできる toshi &lt;- df$age toshi ## [1] 10 18 36 23 6.2 データの読み込み 実際にデータ分析する時に、上のように手入力でデータフレームを作ることはまれ ほとんどの場合は、外部からデータを読み込む（＝インポートする） 以下、よく使われるCSVファイル（.csv）とExcelファイル（.xlsx, .xls）のインポート方法を説明 以下の方法を使うと、取り込まれたデータは自動的にデータフレームになる 6.2.1 ワークディレクトリとインポートの準備 ① ファイルをワークディレクトリに置く インポートしたいデータファイルは、ワークディレクトリと呼ばれる場所に置く必要がある4 ワークディレクトリは、Rを使う時のメインの作業場で、さまざまな操作の起点になる 通常Rでは、起動する度に作業ディレクトリを指定する必要がある しかし、2章で説明したプロジェクト機能を使っていれば、プロジェクトフォルダが作業ディレクトリになる（よって、プロジェクトフォルダにデータファイルを置けば良い） ② インポートするファイルの１行目を変数名にする インポートするファイルの１行目が変数名になっているのを確認する なっていない場合は、１行目に変数名の行を付け加える 6.2.2 csvファイルの読み込み csvファイルを読み込むときは、read.csv()を使う5 以下はsokutei.csvという名前のcsvファイルを、変数dataに格納する例 読み込んだデータを確認する場合は、head()をよく使う data &lt;- read.csv(&quot;sokutei.csv&quot;) head(data) #head()はデータの最初の６行を返す関数 6.2.3 Excelファイルの読み込み Excelファイルを読み込むには、readxlというパッケージが必要 readxlをインストールして読み込んだあと、read_excel()の関数を使う 以下は、sokutei.xlsというファイルを読み込み、sokuteiという変数に格納する例 install.packages(&quot;readxl&quot;) #初回のみ（詳しくは第４章参照） library(readxl) sokutei &lt;- read_excel(&quot;sokutei.xls&quot;) 6.2.4 ファイル保管用のフォルダを作る プロジェクトフォルダ内は、さまざまなファイルで溢れがち だから、プロジェクトフォルダ内にファイル保管用のフォルダを作ると良い 今回は、プロジェクトフォルダ内にdataという新しいフォルダを作ろう その中にsokutei.csvを置いた場合、read_csv(\"data/sokutei.csv\")で読み込む 6.3 演習問題 １章で作ったzemiのプロジェクトフォルダ内にdataというフォルダを作る 以下からsokutei.csvをダウンロードし、上のdataフォルダ内に置く このデータを読み込み、sokutei_csvという変数に格納する head()を使ってsokutei_csvの中身を確認する 以下からsokutei.xlsをダウンロードし、上のdataフォルダ内に置く このデータを読み込み、sokutei_excelという変数に格納する head()を使ってsokutei_excelの中身を確認する sokutei_excelから変数weightを抜き出し、wという新たな変数に格納する wの中身を確認する 挑戦問題： 計量経済学の有名な教科書にWooldridgeの書いたものがある その本に登場するデータをまとめて収録したのがwooldridgeというパッケージ （このようにデータをまとめたパッケージもある） 以下の問題がわからない場合は前章を参照 wooldridgeという名前のパッケージをインストールする wooldridgeのパッケージを呼び出す data(\"wage1\")を実行して、wooldridgeに収録されたwage1というデータを読み込む6 head(wage1)を実行して、wage1の中身を確認する help(package=\"wooldridge\")を実行して、wage1以外にどんなデータが収録されているか確認 エラーが出る場合は、以前の章を参考にパッケージが正しくインストールされているか確認しよう↩︎ 厳密には、tidyverseにも含まるmagrittrパッケージを呼び出すと使えるようになる↩︎ Rのver4.1.0以降は、tidyverseがなくてもパイプ（|&gt;）が使えるようになったが、現在主流の%&gt;%の説明をする↩︎ data()はRに最初から組み込まれたデータを読み込む時に使う関数（例:data(iris))↩︎ "],["データの前処理.html", "Chapter 7 データの前処理 7.1 前処理 7.2 パイプによる処理", " Chapter 7 データの前処理 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしよう！ データフレームの操作 in R 7.1 前処理 集めたデータを分析ができる形に加工することを「前処理」という 地味だけど、「データ分析の８割は前処理」と言われるくらい大事な作業 本章では、以前導入したtidyverseのパッケージを使った前処理のキホンを説明 まずは以下のコードを実行してtidyverseを呼び出そう7 library(tidyverse) 7.2 パイプによる処理 tidyverseを呼び出すと、パイプ演算子(%&gt;%)と呼ばれるものが使えるようになる8 9 パイプを使いこなせるととても便利！（Rが化ける！） 例えば、xというベクトルの平均を求めるには、次のようにすればよかった x &lt;- c(-1,-2,-3,-4,-5) mean(x) ## [1] -3 同じことを、パイプを使って以下のように書ける x %&gt;% mean() ## [1] -3 要するに、引数をパイプで繋いで関数の中に入れてあげているイメージ ベクトルだけでなく、どんなものでもパイプで繋げられる 例えば、前章で作ったdfというデータフレームの中身を、パイプを使って確認しよう df %&gt;% head() #データフレームもパイプで繋げられる ## name age height weight gender ## 1 Tanaka 10 149.5 36 male ## 2 Suzuki 18 153.0 48 female ## 3 Okada 36 171.0 58 male ## 4 Watanabe 23 174.5 65 male 関数同士をパイプで繋ぐこともできる read.csv(&quot;data/sokutei.csv&quot;) %&gt;% head() ## Name Age Height Weight Gender ## 1 Tanaka 10 149.5 36 male ## 2 Suzuki 18 153.0 48 female ## 3 Okada 41 171.0 58 male ## 4 Watanabe 26 174.5 65 male ## 5 Sato 32 159.0 54 female ## 6 Takahashi 16 169.0 87 male また、パイプはいくらでも繋げられる 結果を変数に格納することもできる mean_x &lt;- x %&gt;% abs() %&gt;% #xの各要素の絶対値をとった mean() #絶対値をとったベクトルの平均を計算 mean_x ## [1] 3 どんなものの処理でも、いくらで簡単に繋げられるのがパイプのすごいところ！ このあとデータの前処理で使ってみると、パイプの便利さがわかるはず エラーが出る場合は、以前の章を参考にパッケージが正しくインストールされているか確認しよう↩︎ 厳密には、tidyverseにも含まるmagrittrパッケージを呼び出すと使えるようになる↩︎ Rのver4.1.0以降は、tidyverseがなくてもパイプ（|&gt;）が使えるようになったが、現在主流の%&gt;%の説明をする↩︎ "]]
