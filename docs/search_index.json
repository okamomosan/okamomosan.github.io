[["index.html", "行動経済学の実証分析 Chapter 1 Ready? 1.1 R(Studio)とは？ 1.2 Tips! 1.3 R(Studio)のインストール", " 行動経済学の実証分析 Tomohisa OKADA 2023-04-30 Chapter 1 Ready? 1.1 R(Studio)とは？ Rは、オープンソースで利用可能な統計解析に特化したプログラミング言語 RStudioは、Rを使うための統合開発環境（なくてもRは使えるが、あるとめちゃ便利！） 今は「まったく意味不明」で全然OK！ 1.2 Tips! Rに関するお役立ちサイトや書籍をまとめる 「卒業論文のためのR入門」 by 森知晴先生 Rの使い方と心理統計学の基礎が一挙に学べる！ 「私たちのR」 by 宋財泫先生 &amp; 矢内勇生先生 辞書的に使える！Tidyverseを使ったモダンなRのプログラムが学べる！ 1.3 R(Studio)のインストール 次のサイトにアクセス( https://posit.co/download/rstudio-desktop/ ) 「1:Install R」からRをインストール 「2:Install RStudio」からRStudioをインストール うまくインストールできない場合は、「私たちのR」に超詳しい解説がある "],["go.html", "Chapter 2 Go!! 2.1 RStudioを開く 2.2 コンソールに直接打ち込む 2.3 Rスクリプトを使う 2.4 プロジェクト管理 2.5 演習問題", " Chapter 2 Go!! とりあえずまずは使ってみよう！ 2.1 RStudioを開く RStudioのアイコンから起動 次のような画面が表示される 2.2 コンソールに直接打ち込む 左側の大きな枠を見る Consoleのタブが選択されていることを確認 この画面（＝コンソール）を使い、簡単な足し算を実行しよう 最下段の&gt;のあとに1+1と打ち込みEnter（macはreturn）を押す [1] 2と返ってくる 2の部分が1+1の計算結果（[1]は1行目という意味） 2.3 Rスクリプトを使う コンソールに書いたコードは、Rstudioを終了すると消える （実際に終了して再起動してみよう） だから、Rスクリプトと呼ばれる保存可能なファイルにコードを書くことが多い Rスクリプトを作る： RStudioの左上の をクリックし、「R Script」を選択 左上に新しくできた枠に、空のRスクリプトファイルが表示される （untitled1と表示されたタブが作成したRスクリプト） RStudioの４つのペーン： 実際には、この４つの枠（＝ペーン）に分かれた画面で作業することが多い ①左上：メインの作業場で、Rスクリプトのコードなどを書くところ ②右上：変数やオブジェクトのリストが表示されたり、バージョン管理を行う ③左下：コードの実行結果が表示されるコンソールや、各種コマンドを実行するターミナルなど ④右下：各種ファイルやパッケージの表示、出力した図の表示など Rスクリプトに書く： 左上のペーンを見て、untitled1のタブが選択されていることを確認 1行目に1+1と入力してctrl+Enter（macはcommand+return）を押す （ をクリックしても良い） 左下のペーンのコンソールに結果([1] 2)が表示される 保存： Rスクリプトはctrl+s（macはcommand+s）で好きな時に保存できる （ をクリックしても良い） 初回はファイル名と保存場所も決める （test.Rという名前でデスクトップに保存してみよう） 試しに、保存したRスクリプトのタブを閉じてみよう （test.Rのタブの右側の×をクリック） 左上の をクリックし、保存したRスクリプトのファイルを選択 （つまり、デスクトップにあるtest.Rを選択） Rスクリプトが先ほど保存した状態で開く さらに書く！： 続けて、簡単な引き算を実行しよう 2行目に5-2と入力する 2行目にカーソルを合わせてctrl+Enterを押す 2行目の計算結果([1] 3)が表示される 1行目にカーソルを合わせてctrl+Enterを押す 1行目の計算結果([1] 2)が表示される つまり、実行したい行にカーソルを合わせてctrl+Enterを押せば良い 全ての行を一括で実行したいならctrl+shift+Enter（macはcommand+shift+return） 一部分だけ実行したいなら、下図のように実行したい行だけ選択してctrl+Enter Rスクリプトを使うメリット： コードが保存できる（毎回書き直さなくて良い！） 長く複雑なコードを書いたり、管理するのが楽 他の人に配布できる（分析を再現してもらいやすい） などなど… 2.4 プロジェクト管理 研究プロジェクトが進むと、ひとつのRスクリプトだけでは管理しきれなくなる プロジェクトを使えば、複数のRスクリプトや関連データなどを一つのフォルダにまとめて効率よく管理できる プロジェクトの作成： 左上の をクリックし、「New Directry」→「New Project」の順に選択 次の画面で①プロジェクト名と、その②作成場所を指定して③「Create Project」 指定した場所に、指定したプロジェクト名のフォルダができているのを確認しよう そのフォルダの中にプロジェクト名.Rprojというファイルができているのを確認しよう 以下は、macでDocumentフォルダ内にsugoi_projectというプロジェクトを作った例 初めはご利益がわかりにくいが、研究プロジェクトごとにプロジェクトを作るクセをつけよう そして、次の心得に従い、プロジェクト上で作業をするようにしよう！ 毎回プロジェクト名.RprojをダブルクリックしてRstudioを起動 関連するファイルはプロジェクト名のフォルダにまとめて一元管理 2.5 演習問題 自分の好きな場所にzemiという名前のプロジェクトを作る 指定した場所にzemiというフォルダができているのを確認する フォルダの中にzemi.Rprojというファイルが出来ているのを確認 ※ 今後は、このzemiプロジェクトで作業していることを前提に解説する "],["基本操作.html", "Chapter 3 基本操作 3.1 四則演算 3.2 変数とオブジェクト 3.3 関数①（数値に対する関数） 3.4 ベクトルと行列 3.5 関数②（ベクトルや行列に対する関数） 3.6 演習問題", " Chapter 3 基本操作 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしよう！ オブジェクトの使い方 in R 関数の使い方 in R 3.1 四則演算 たし算: +を使う 1 + 1 ## [1] 2 ひき算: -を使う 5 - 2 ## [1] 3 かけ算: *を使う 4 * 5 ## [1] 20 わり算: /を使う（分数のイメージ） 8 / 2 ## [1] 4 累乗: ^か**を使う（例：\\(4^2\\)なら次のとおり） 4 ^ 2 ## [1] 16 4 ** 2 ## [1] 16 3.2 変数とオブジェクト オブジェクトとは、色々なモノを入れる箱のようなもの1 オブジェクトを変数という人もいる（数学の変数のようなイメージだから） 本資料では変数と呼ぶことにする（字数が少ないから） 次のコードを見てみよう x &lt;- 1 # &lt;- は左向矢印のイメージ # このように#から始まる文章を書いてコメントを残せる # これをコメントアウトと呼ぶ # あとで見てわかりやすいような覚え書きなどを残そう これはxという箱を作り、その中に数字の1を入れたイメージ （変数xに１を代入したイメージでもOK！） 上のコードを実行しても何も表示されないが、それでOK （「箱に入れる」だけのコードなので表示はされない） 変数の中身を確認したい時は、オブジェクトの名前を書いて実行 x ## [1] 1 数値を代入した変数同士で演算もできる y &lt;- 1 z &lt;- 2 y * z # 1*2を計算したことになる ## [1] 2 変数はいつでも上書きできる x &lt;- 1 #xに1を代入 x ## [1] 1 x &lt;- 2 #xを2に上書き x ## [1] 2 計算結果を変数に代入することもできる x &lt;- 2+5 x # 計算結果の7が代入される ## [1] 7 慣れるまでは不思議だが、こんなこともできる 意外とよく使うので、頭の片隅に留めておこう z &lt;- 2 #zに2を代入 z &lt;- z + 1 #z=2に1を足したものを、もう一度zに代入 z #新しいzを表示 ## [1] 3 変数には数値以外も入れることができる 例えば、mojiという変数を作り文字列を入れてみる # 文字列は&quot;ダブルコーテーション&quot;で囲む # &#39;シングルコーテーション&#39;でも良い # 次のようにアルファベット以外も一応使えるが推奨しない moji &lt;- &quot;岡田先生ステキ&quot; moji ## [1] &quot;岡田先生ステキ&quot; 練習問題 {-} - 変数xに3、変数yに6を代入する - xとyをそれぞれ2乗して和をとり、結果が45となることを確認する 3.3 関数①（数値に対する関数） 関数のキホン： Rにはさまざまな機能を実行できる関数が用意されている 例えば、平方根を計算する関数がsqrt() ()の中に数値を入れると、その平方根を返してくれる sqrt(2) ## [1] 1.414214 このように関数はxxx()のように最後が丸括弧になっている 丸括弧の中に、引数(ひきすう)と呼ばれる指定された形式の値を入れて実行する その結果、出力された値を戻り値という 先ほどのsqrt(2)なら2が引数で、計算結果の1.414214が戻り値 複数の引数を持つ関数： 引数は１つとは限らないので注意 例えば、log()は対数を計算する関数 次のようにすると、10の自然対数を返してくれる log(10) ## [1] 2.302585 でも、2つ目の引数base=10を付け足すと、底が10の常用対数を返してくれる log(10, base = 10) ## [1] 1 他にも、数え切れないほどの関数がある 関数の機能や引数の調べ方： 関数の機能や、どんな形式の引数をいくつ持つかを調べるにはhelp()を使う 知りたい関数から()を除いたものを、help()の中に入れる 例えば、log()について知りたいならhelp(log)と書いて実行 すると、Rstudioの右下（左下ではない！）のペーンに詳細が表示される 3.4 ベクトルと行列 Rでは、複数のデータの値をひとまとめにして扱いやすくできる 3.4.1 ベクトル データを1列に並べたものをベクトルと呼ぶ ベクトルは関数c()を使って作る ベクトルも変数に入れることができる 例として、5つの数字（例えば、2,4,2,3,5）を並べたベクトルを変数vに代入する v &lt;- c(2, 4, 2, 3, 5) #ベクトルを作り変数に代入 v #変数vの中身を確認 ## [1] 2 4 2 3 5 連番のベクトル（例えば2,3,4,5,6）を作りたい時は、次のようにも書ける v &lt;- c(2:6) #「n:m」で「nからmまで」の意味 v ## [1] 2 3 4 5 6 ベクトルと数値の演算： ベクトルにも四則演算の記号（=演算子）を使った演算ができる ベクトル内のそれぞれの数字に、四則演算が施される 以下の出力結果で確認してみよう v+2 #それぞれの数字に２を足す ## [1] 4 5 6 7 8 2*v #それぞれの数字に２をかける ## [1] 4 6 8 10 12 練習問題 上のvについて、v-2、v/2、v^2の実行結果を確認する ベクトル同士の演算： Rでは、ベクトル同士の演算もできる まずは2つのベクトルを用意しよう v1 &lt;- c(1, 2) v2 &lt;- c(2, 4) これらを+を使って「足す」 すると、１つめの数同士（1と2）と、２つめの数同士(2と4)が足される v1 + v2 ## [1] 3 6 *を使って「かける」場合も、同じように1つめの数同士、2つめの数同士がかけられる v1 * v2 ## [1] 2 8 ベクトル同士の「かけ算」には内積がある Rでは、%*%で内積を計算できる v1 %*% v2 ## [,1] ## [1,] 10 ベクトルの長さ（=入っている数値の個数）が違うとおかしな計算になり、警告が出る #以下のv1には3つの要素があるけど、v2には2つしかない #この場合、v2の1つめの要素を無理やりv1の３つめに足してしまう v1 &lt;- c(1, 2, 3) #3つの数を代入 v2 &lt;- c(2, 4) #2つの数を代入 v1 + v2 #長さが違うからうまく計算できず警告が出る ## Warning in v1 + v2: longer object length is not a multiple of shorter object ## length ## [1] 3 6 5 練習問題 上のv1とv2を使い、-、/、^の３つの演算を行う いずれも1つめの数値同士、2つめの数値同士で対応した演算がなされることを確かめる 要素の抽出： ベクトルから、任意の要素（n番目の数）を抽出する方法を説明する xという名前のベクトルからn番目の要素を抽出する時はx[n] 具体例として、先ほどのベクトルv=c(2,4,2,3,5)で考える 2番目の要素（つまり4）を抜き出したいなら、v[2]と書く v[2] ## [1] 3 2〜４番めの要素(つまり4,2,3)を抜き出したいなら、v[2:4]と書く v[2:4] ## [1] 3 4 5 3.4.2 行列 行列のキホン： データを行と列の2次元に並べたものを行列と呼ぶ 例えば、2行3列の行列 \\(\\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ \\end{pmatrix}\\) を作ってMに代入するには、matrix()を使い次のように書く #初めの1:6はc(1:6)と同じで「1,2,3,4,5,6」の意味 #この6つの数字を、2つの行(row)と3つの列(col)に分ける #byrow = Tで、6つの数字を左から右（zの書き順）に埋めるよう指示 #byrow = Tを消すと、上から下に埋める（各自確かめよう） M &lt;- matrix(1:6, nrow = 2, ncol = 3, byrow = T) M ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 次の関数を使って、ベクトル同士を結合しても行列を作れる v1 &lt;- c(1,2,3) v2 &lt;- c(1,1,1) #2つのベクトルv1とv2を作る rbind(v1, v2) #v1とv2を行(row)方向に繋げる ## [,1] [,2] [,3] ## v1 1 2 3 ## v2 1 1 1 cbind(v1, v2) #v1とv2を列(column)方向に繋げる ## v1 v2 ## [1,] 1 1 ## [2,] 2 1 ## [3,] 3 1 rbind(M, v1) #「行列とベクトル」や「行列同士」も繋げられる ## [,1] [,2] [,3] ## 1 2 3 ## 4 5 6 ## v1 1 2 3 要素の抽出： 行列xから要素を抜き出すには、x[抜き出したい行、抜き出したい列]と書く 具体例として、先の行列Mから色々な要素を抜き出してみよう # 2行1列目を抽出し、変数M21に代入 M21 &lt;- M[2,1] # 2行めを抽出 M[2,] ## [1] 4 5 6 # 1列めを抽出 M[,1] ## [1] 1 4 # 1,2行めと1,3列めを抽出 M[c(1,2),c(1,3)] ## [,1] [,2] ## [1,] 1 3 ## [2,] 4 6 行列の演算： n行n列の２つの行列同士の計算について、足し算は+、引き算は-を使えば良い 以下の例のように、かけ算は%*%を使わなくてはいけないので注意 M #先ほど作った2行3列の行列を表示 ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 M2 &lt;- matrix(c(1,2,0,1,0,2), nrow = 3, ncol = 2, byrow = T) #新たに3行2列の行列を作る M2 #今作った2行3列の行列を表示 ## [,1] [,2] ## [1,] 1 2 ## [2,] 0 1 ## [3,] 0 2 #２つの行列の積MN M %*% M2 ## [,1] [,2] ## [1,] 1 10 ## [2,] 4 25 #２つの行列の積MN M2 %*% M ## [,1] [,2] [,3] ## [1,] 9 12 15 ## [2,] 4 5 6 ## [3,] 8 10 12 v &lt;- c(1,2,3) #要素が３つのベクトルを作る #行列とベクトルのかけ算も%*%を使う #縦ベクトルと横ベクトルは区別されないので、次のコードで計算できる v %*% M2 # ただし、M2%*%vのように計算できない場合はエラーが出る（各自確かめよう） ## [,1] [,2] ## [1,] 1 10 3.5 関数②（ベクトルや行列に対する関数） 先のrbind()やcbind()はベクトルや行列も引数にとれる関数だった ベクトルや行列に対して使える他の関数をいくつか紹介する ベクトルの頻出関数： 以下の関数はどれもよく使うので、しっかり覚えよう 関数(引数xはベクトル) 意味 summary(x) 基本統計量の一括表示 max(x) xの要素の最大値 min(x) xの要素の最小値 mean(x) xの平均値 median(x) xの中央値 var(x) xの不偏分散 sd(x) xの不偏標準偏差 sum(x) xの各要素の総和 range(x) xのデータの範囲（最小値と最大値） length(x) xのデータの個数（ベクトルの次元） sort(x) xの各要素を小さい順に並び替え sort(x, decreasing = TRUE) xの各要素を大きい順に並び替え 具体的に理解するため、5人の年齢のデータを作成する age &lt;- c(36, 16, 43, 18, 22) #5人の年齢のベクトルを作成 このベクトルageを引数にして、上表のいくつかを実行してみる summary(age) #基本統計量を一括表示 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 16 18 22 27 36 43 max(age) #一番大きい値を取り出す（5人のうち最年長は43歳） ## [1] 43 mean(age) #算術平均（5人の平均年齢は27歳） ## [1] 27 var(age) #不偏分散（5人の平均の分散は141） ## [1] 141 length(age) #データの長さ（ベクトルの次元）（5個のデータなので5） ## [1] 5 練習問題 引数をageにして、min(), median(),sd(),sum(),range(),sort()を実行する 各々の結果が何を意味しているのかを解釈する 引数を行列Mにして、上表の各関数の結果を確認する 行列の頻出関数： 行列を引数に持つ関数のうち、比較的よく使うものをまとめる どのような結果になるかは各自確かめてみよう 関数(引数xは行列) 意味 matrix(0, nrow=2, ncol=3) 2 行 3 列のゼロ行列を作成 diag(5) 5×5の単位行列作成 diag(X) &lt;- 1 行列 X の対角成分を全て 1 にする t(X) 行列 X の転置行列 solve(X) 行列 X の逆行列 det(X) 行列 X の行列式 rowSums(X) 行列 X の行和 colSums(X) 行列 X の列和 RowMeans(X) 行列 X の行平均 colMeand(X) 行列 X の列平均 練習問題 上の各関数を先の行列Mに使い、結果を確かめよう 3.6 演習問題 aさんの身長は149cm, bさんは153cm, cさんは169cm, dさんは174cmとする aさんの体重は36kg, bさんは48kg, cさんは61kg, dさんは65kgとする 4人の身長を表した数値のみからなるベクトル（単位は不要）を作り、変数hに保存する 変数hの平均と標準偏差を求める ベクトルのかけ算を使い、４人の身長をインチで表すといくらになるか求める （1cm＝0.39インチで計算し、結果は変数に保存しない） 4人の体重を表した数値のみからなるベクトル（単位は不要）を作り、変数wに保存する 変数hと変数wを結合して、１行目が身長、２行目が体重となる2×4行列を作り、変数Mに保存 行列の要素抽出を使い、変数Mからbさんの体重のデータを抜き出す 変数wを小さい順に並べ替えることで、身長の低い順に並び替えた変数h2を作る tidyverseは複数の便利なパッケージをまとめた「パッケージのパッケージ」↩︎ "],["関数の自作とパッケージ.html", "Chapter 4 関数の自作とパッケージ 4.1 関数の自作 4.2 パッケージとは？ 4.3 パッケージのインストール", " Chapter 4 関数の自作とパッケージ 本章の説明がわからない人は、第１章で紹介した「私たちのR」 を参照しよう！ 4.1 関数の自作 本節は少し難しいのでスキップしてもOK Rには、第３章で紹介した以外にもたくさんの関数が用意されている でも、既存関数を駆使しても、長く煩雑なコードでしか処理できないことも多い そのようなコーディングを繰り返し実行しなければいけない時は、自作関数を作ると便利 自作関数の作り方の基本は以下のとおり 関数名 &lt;- function (引数名) { 処理内容 } 例えば、\\(a/(1-x)\\)という計算を、様々なaとxの値で繰り返し実行する必要があるとする この計算を実行する関数inf_geo()は、次のように自作できる inf_geo &lt;- function (a, x) { a/(1-x) } 出来上がった関数を使うときは、次のようにする #a=1で、x=0.8を計算したい場合 inf_geo(1, 0.8) ## [1] 5 4.2 パッケージとは？ 実は、よく使う分析や処理の関数は既に誰かが作って公開していることが多い 誰かが作った便利な自作関数が配布用にまとめられたものをパッケージという パッケージは、Rの機能を拡張しパワーアップさせる道具箱のイメージ 4.3 パッケージのインストール 数えきれないパッケージの中から、自分に合うものを適宜インストールして利用できる インストール方法は、引数をインストールしたいパッケージ名にしてinstall.packages()を実行 例えば、tidyverseというパッケージは、次のようにインストールする2 このtidyverseを導入することでRが化ける！（詳しい使い方は次章） # 初回に一度だけ実行 install.packages(&quot;tidyverse&quot;) #引数の&quot;ダブルコーテーション&quot;を忘れない インストールするだけでは使えない、次のコードを実行して初めてtidyverseが使えるようになる # RStudioを起動する度に実行 library(tidyverse) #引数の&quot;ダブルコーテーション&quot;は不要 install.packages()は、初回に一度だけ実行すれば良い ただし、library()はRstudioを起動するたびに実行する必要がある そのため、Rスクリプトの最初に分析で使うlibrary(パッケージ名)を並べておくと良い tidyverseは複数の便利なパッケージをまとめた「パッケージのパッケージ」↩︎ "],["データのあつかい方.html", "Chapter 5 データのあつかい方 5.1 インポートの準備 5.2 インポート 5.3 インポートしたデータの確認", " Chapter 5 データのあつかい方 本章の説明がわからない人は、森知晴先生のすばらしい動画たちを参考にしてください！ データの読み込み in R データフレームの操作 in R データフレーム 多くのデータは、表形式でまとめられます。 縦方向に観測値を、横方向に変数を並べたデータのことをRではデータフレームと呼びます。 例として、年齢のベクトルage_vectorと性別のベクトルgender_vectorを合わせてデータフレームを作成してみましょう。 データフレームを作成する関数はdata.frame()です。 age &lt;- c(18, 21, 22, 23, 34) #年齢のベクトルの作成 gender &lt;- c(&quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;) #性別のベクトルの作成 first_dataframe &lt;- data.frame(age, gender) first_dataframe ## age gender ## 1 18 female ## 2 21 male ## 3 22 male ## 4 23 female ## 5 34 female 1人目が18歳の女性、2人目が21歳の男性…を表すデータフレームが作成できました。 後ほどExcelファイルなどからデータのRにインポートする方法を学びますが、その際は自動的にデータフレームとしてインポートされます。 データ分析の際に、データフレームのうち特定の変数だけを使いたい場合がよくあります。 その際は、データフレーム名$変数名と表記することで、特定の変数を使うことができます。 例えば、先ほど作成したfirst_dataframeから性別の変数のみを見てみましょう。 first_dataframe$gender ## [1] &quot;female&quot; &quot;male&quot; &quot;male&quot; &quot;female&quot; &quot;female&quot; 性別のベクトルを取り出すことができました。 関数と組み合わせると、年齢の平均値を以下のように計算できます。 mean(first_dataframe$age) ## [1] 23.6 練習問題 オブジェクトincomeに数値のベクトル10, 100, 1000, 10000, 100000を代入してください。 オブジェクトcityに文字列のベクトル”ibaraki”, “takatsuki”, “ibaraki”, “takatsuki”, “takatsuki”を代入してください。 incomeとcityを合わせたデータフレームincome_dataを作成してください。 income_dataを用いて、incomeの中央値を求めてください。 データの読み込み データ分析のためには、データをRStudioにインポート（読み込み）させなければなりません。インポートの方法は、持っているデータのファイル形式によって変わります。 5.1 インポートの準備 インポートしたいファイルは、プロジェクトと同じフォルダに入れておきましょう。 プロジェクトはChapter 2で学習しています。 インポートしたいファイルの形式も確認しておきましょう。 代表的な形式として、CSVファイル（.csv）、Excelファイル（.xlsx, .xls）があります。 拡張子が表示されていない場合はこちらを参考に表示させるようにしましょう。 インポートの前に、ファイルの1行目は変数名（英語）にしておきましょう。 5.2 インポート 5.2.1 CSVファイルの場合（.csv） CSVファイルの場合は、read.csvを用います。ファイルの名前がsotsuron.csvの場合、以下のように実行します。 data_original &lt;- read.csv(&quot;sotsuron.csv&quot;) これは、csvファイルの内容をdata_originalというオブジェクトに格納しています。 オブジェクト名は自由につけることができますが、わかりやすいものにしましょう。 ここでは、インポートした元データであることを明示するため、data_originalという名前にしています。 練習問題 以下から「tidy_data.csv」をダウンロード https://www.dropbox.com/s/wm46esg4dicye8j/tidy_data.csv?dl=0 read.csvを使って読み込み、dataというオブジェクトに格納 5.3 インポートしたデータの確認 上の練習問題のデータがきちんとインポートされたかどうか、確認しておきましょう。 右上のペーンの“Environment”に新しいオブジェクトができているか確認（上の例ではdata） クリックして左上のペーンに出てくるか確認 head(data)で先頭のデータを確認 str(data)で各変数の「型」（後で説明）を確認 "]]
